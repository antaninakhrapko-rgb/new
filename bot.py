import feedparser
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties

bot = Bot(
    token="8210782460:AAHK6dInuvZduJ_vtfYZT01qgNkN6CrPNEE",
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# üîó –ì–æ—Ä–æ–¥ ‚Üí –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
city_keywords = {
    "–º–∏–Ω—Å–∫": ["–º–∏–Ω—Å–∫", "–º–∏–Ω—Å–∫–∞—è"],
    "–º–æ–≥–∏–ª—ë–≤": ["–º–æ–≥–∏–ª—ë–≤", "–º–æ–≥–∏–ª–µ–≤—Å–∫–∞—è", "–±–æ–±—Ä—É–π—Å–∫"],
    "–≤–∏—Ç–µ–±—Å–∫": ["–≤–∏—Ç–µ–±—Å–∫", "–≤–∏—Ç–µ–±—Å–∫–∞—è", "–ø–æ–ª–æ—Ü–∫", "–Ω–æ–≤–æ–ø–æ–ª–æ—Ü–∫"],
    "–≥–æ–º–µ–ª—å": ["–≥–æ–º–µ–ª—å", "–≥–æ–º–µ–ª—å—Å–∫–∞—è", "–∂–ª–æ–±–∏–Ω"],
    "–±—Ä–µ—Å—Ç": ["–±—Ä–µ—Å—Ç", "–±—Ä–µ—Å—Ç—Å–∫–∞—è", "–ø–∏–Ω—Å–∫", "–±–∞—Ä–∞–Ω–æ–≤–∏—á–∏"],
    "–≥—Ä–æ–¥–Ω–æ": ["–≥—Ä–æ–¥–Ω–æ", "–≥—Ä–æ–¥–Ω–µ–Ω—Å–∫–∞—è", "–ª–∏–¥–∞"]
}

# üì° RSS-–ª–µ–Ω—Ç—ã
rss_feeds = [
    "https://mlyn.by/feed/",
    "https://minsknews.by/feed/",
    "https://mogilevnews.by/feed/",
    "https://vitvesti.by/feed/",
    "https://www.belta.by/rss/all"
]

# üß† –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É
def classify(entry):
    title = entry.title.lower()
    if any(word in title for word in ["—ç–∫–æ–Ω–æ–º", "–±–∏–∑–Ω–µ—Å", "—Ä—ã–Ω–æ–∫"]):
        return "—ç–∫–æ–Ω–æ–º–∏–∫–∞"
    elif any(word in title for word in ["–ø–æ–∂–∞—Ä", "–≤–∑—Ä—ã–≤", "—Å–ø–∞—Å–∞—Ç–µ–ª", "—á—Ä–µ–∑–≤—ã—á–∞–π–Ω"]):
        return "—á—Ä–µ–∑–≤—ã—á–∞–π–Ω—ã–µ"
    elif any(word in title for word in ["–¥—Ç–ø", "–∞–≤–∞—Ä–∏—è", "—Å—Ç–æ–ª–∫–Ω–æ–≤"]):
        return "–¥—Ç–ø"
    else:
        return "–¥—Ä—É–≥–æ–µ"

# üì∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
def get_news_by_city(city):
    city = city.lower()
    keywords = city_keywords.get(city, [city])
    blocks = {"—ç–∫–æ–Ω–æ–º–∏–∫–∞": [], "—á—Ä–µ–∑–≤—ã—á–∞–π–Ω—ã–µ": [], "–¥—Ç–ø": [], "–¥—Ä—É–≥–æ–µ": []}

    for url in rss_feeds:
        feed = feedparser.parse(url)
        for entry in feed.entries:
            title = entry.title.lower()
            if any(key in title for key in keywords):
                category = classify(entry)
                blocks[category].append(f"üóû <b>{entry.title}</b>\n{entry.link}")
            if sum(len(v) for v in blocks.values()) >= 5:
                break

    result = []
    for key in ["—ç–∫–æ–Ω–æ–º–∏–∫–∞", "—á—Ä–µ–∑–≤—ã—á–∞–π–Ω—ã–µ", "–¥—Ç–ø", "–¥—Ä—É–≥–æ–µ"]:
        if blocks[key]:
            result.append(f"üìå <b>{key.capitalize()}</b>\n" + "\n\n".join(blocks[key][:2]))
    return "\n\n".join(result) if result else "üì∞ –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–µ–º—É —Ä–µ–≥–∏–æ–Ω—É."

# üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message(F.text == "/start")
async def start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–∫–∞–∂—É —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–∞—à–∏–º –≥–æ—Ä–æ–¥–æ–º.\n\nüìç –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∏–Ω—Å–∫, –ë–æ–±—Ä—É–π—Å–∫, –í–∏—Ç–µ–±—Å–∫).")

# üèô –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞
@dp.message(F.text)
async def handle_city_text(message: Message):
    city = message.text.strip()
    news = get_news_by_city(city)
    await message.answer(f"üìç –ì–æ—Ä–æ–¥: <b>{city}</b>\n\n{news}")

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())







